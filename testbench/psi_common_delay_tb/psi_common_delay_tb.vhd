------------------------------------------------------------------------------
--  Copyright (c) 2018 by Paul Scherrer Institute, Switzerland
--  All rights reserved.
--  Authors: Oliver Bruendler
------------------------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.psi_common_math_pkg.all;
use work.psi_tb_txt_util.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_common_delay_tb is
  generic(
    resource_g    : string  := "AUTO";  -- AUTO, SRL or BRAM
    delay_g       : integer := 10;
    ram_behavior_g : string  := "RBW"
  );
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_common_delay_tb is
  -- *** Fixed Generics ***

  -- *** Not Assigned Generics (default values) ***
  constant width_g         : positive := 16;
  constant bram_threshold_g : positive := 128;
  constant rst_state_g      : boolean  := True;

  -- *** TB Control ***
  signal TbRunning            : boolean                  := True;
  signal NextCase             : integer                  := -1;
  signal ProcessDone          : std_logic_vector(0 to 0) := (others => '0');
  constant AllProcessesDone_c : std_logic_vector(0 to 0) := (others => '1');
  constant TbProcNr_Stimuli_c : integer                  := 0;

  -- *** DUT Signals ***
  signal clk_i     : std_logic                                := '0';
  signal rst_i     : std_logic                                := '1';
  signal dat_i  : std_logic_vector(width_g - 1 downto 0)   := (others => '0');
  signal vld_i   : std_logic                                := '0';
  signal dat_o : std_logic_vector((width_g - 1) downto 0) := (others => '0');

begin
  ------------------------------------------------------------
  -- DUT Instantiation
  ------------------------------------------------------------
  i_dut : entity work.psi_common_delay
    generic map(
      delay_g       => delay_g,
      ram_behavior_g => ram_behavior_g,
      resource_g    => resource_g
    )
    port map(
      clk_i     => clk_i,
      rst_i     => rst_i,
      dat_i  => dat_i,
      vld_i   => vld_i,
      dat_o => dat_o
    );

  ------------------------------------------------------------
  -- Testbench Control !DO NOT EDIT!
  ------------------------------------------------------------
  p_tb_control : process
  begin
    wait until ProcessDone = AllProcessesDone_c;
    TbRunning <= false;
    wait;
  end process;

  ------------------------------------------------------------
  -- Clocks !DO NOT EDIT!
  ------------------------------------------------------------
  p_clock_Clk : process
    constant Frequency_c : real := real(100e6);
  begin
    while TbRunning loop
      wait for 0.5 * (1 sec) / Frequency_c;
      clk_i <= not clk_i;
    end loop;
    wait;
  end process;

  ------------------------------------------------------------
  -- Resets
  ------------------------------------------------------------

  ------------------------------------------------------------
  -- Processes
  ------------------------------------------------------------
  -- *** Stimuli ***
  p_Stimuli : process
  begin
    -- *** Vld high constantly ***
    print(">> Vld high constantly");
    wait until rising_edge(clk_i);
    rst_i   <= '0';
    wait until rising_edge(clk_i);
    vld_i <= '1';
    for i in 0 to delay_g + 30 loop
      dat_i <= std_logic_vector(to_unsigned(i, width_g));
      if i < delay_g + 1 then           --
        assert unsigned(dat_o) = 0 report "###ERROR###: Out data wrong, expected " & to_string(0) & ", got " & to_string(dat_o) severity error;
      else
        -- output is latched on the  next rising edge, therefore shift by one
        assert unsigned(dat_o) = i - 1 - delay_g report "###ERROR###: Out data wrong, expected " & to_string(i-1-delay_g) & ", got " & to_string(dat_o) severity error;
      end if;
      wait until rising_edge(clk_i);
    end loop;
    vld_i <= '0';

    -- *** Vld toggling ***
    print(">> Vld toggling");
    rst_i   <= '1';
    wait until rising_edge(clk_i);
    rst_i   <= '0';
    wait until rising_edge(clk_i);
    for i in 0 to delay_g + 30 loop
      vld_i  <= '1';
      dat_i <= std_logic_vector(to_unsigned(i, width_g));
      if i < delay_g then
        assert unsigned(dat_o) = 0 report "###ERROR###: Out data wrong, expected " & to_string(0) & ", got " & to_string(dat_o) severity error;
      else
        assert unsigned(dat_o) = i - delay_g report "###ERROR###: Out data wrong, expected " & to_string(i-delay_g) & ", got " & to_string(dat_o) severity error;
      end if;
      wait until rising_edge(clk_i);
      vld_i  <= '0';
      wait until rising_edge(clk_i);
      wait until rising_edge(clk_i);
      wait until rising_edge(clk_i);
    end loop;
    vld_i <= '0';

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_Stimuli_c) <= '1';
    wait;
  end process;

end;
