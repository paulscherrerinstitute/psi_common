------------------------------------------------------------------------------
--  Copyright (c) 2018 by Paul Scherrer Institute, Switzerland
--  All rights reserved.
--  Authors: Oliver Bruendler
------------------------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- library work
use work.psi_tb_txt_util.all;
use work.psi_tb_compare_pkg.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_common_clk_meas_tb is
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_common_clk_meas_tb is
  -- *** Fixed Generics ***
  constant MasterFrequency_g  : positive := 125_000;
  constant MaxMeasFrequency_g : positive := 250_000;

  -- *** Not Assigned Generics (default values) ***

  -- *** TB Control ***
  signal TbRunning            : boolean                  := True;
  signal NextCase             : integer                  := -1;
  signal ProcessDone          : std_logic_vector(0 to 0) := (others => '0');
  constant AllProcessesDone_c : std_logic_vector(0 to 0) := (others => '1');
  constant TbProcNr_Stimuli_c : integer                  := 0;

  -- *** DUT Signals ***
  signal ClkMaster    : std_logic                     := '1';
  signal Rst          : std_logic                     := '1';
  signal FrequencyHz  : std_logic_vector(31 downto 0) := (others => '0');
  signal FrequencyVld : std_logic                     := '0';
  signal ClkTest      : std_logic                     := '1';

  -- *** Handwritten ***
  signal MeasFrequency : real := 101.35e3;

begin
  ------------------------------------------------------------
  -- DUT Instantiation
  ------------------------------------------------------------
  i_dut : entity work.psi_common_clk_meas
    generic map(
      MasterFrequency_g  => MasterFrequency_g,
      MaxMeasFrequency_g => MaxMeasFrequency_g
    )
    port map(
      ClkMaster    => ClkMaster,
      Rst          => Rst,
      FrequencyHz  => FrequencyHz,
      FrequencyVld => FrequencyVld,
      ClkTest      => ClkTest
    );

  ------------------------------------------------------------
  -- Testbench Control !DO NOT EDIT!
  ------------------------------------------------------------
  p_tb_control : process
  begin
    wait until Rst = '0';
    wait until ProcessDone = AllProcessesDone_c;
    TbRunning <= false;
    wait;
  end process;

  ------------------------------------------------------------
  -- Clocks !DO NOT EDIT!
  ------------------------------------------------------------
  p_clock_ClkMaster : process
    constant Frequency_c : real := real(125.0e3);
  begin
    while TbRunning loop
      wait for 0.5 * (1 sec) / Frequency_c;
      ClkMaster <= not ClkMaster;
    end loop;
    wait;
  end process;

  p_clock_ClkTest : process
  begin
    while TbRunning loop
      wait for 0.5 * (1 sec) / MeasFrequency;
      ClkTest <= not ClkTest;
    end loop;
    wait;
  end process;

  ------------------------------------------------------------
  -- Resets
  ------------------------------------------------------------
  p_rst_Rst : process
  begin
    wait for 1 us;
    -- Wait for two clk edges to ensure reset is active for at least one edge
    wait until rising_edge(ClkMaster);
    wait until rising_edge(ClkMaster);
    Rst <= '0';
    wait;
  end process;

  ------------------------------------------------------------
  -- Processes
  ------------------------------------------------------------
  -- *** Stimuli ***
  p_Stimuli : process
  begin
    -- start of process !DO NOT EDIT
    wait until Rst = '0';

    -- Frequency Measurement
    wait for 2 sec;
    wait until rising_edge(ClkMaster);
    StdlvCompareInt(101_350, FrequencyHz, "Wrong Frequency", false, 50);

    -- Maximum 
    MeasFrequency <= 400.0e3;
    wait for 2 sec;
    wait until rising_edge(ClkMaster) and FrequencyVld = '1';
    StdlvCompareInt(250_000, FrequencyHz, "Wrong Maximum", false, 50);

    -- Minimum 
    MeasFrequency <= 0.1;
    wait for 2 sec;
    wait until rising_edge(ClkMaster) and FrequencyVld = '1';
    StdlvCompareInt(0, FrequencyHz, "Wrong Minimum", false, 0);

    -- Correct Frequency at End 
    MeasFrequency <= 52.123e3;
    wait until rising_edge(ClkTest);
    wait for 2 sec;
    wait until rising_edge(ClkMaster) and FrequencyVld = '1';
    StdlvCompareInt(52_123, FrequencyHz, "Correct Frequency at End", false, 50);

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_Stimuli_c) <= '1';
    wait;
  end process;

end;
