------------------------------------------------------------------------------
--  Copyright (c) 2018 by Paul Scherrer Institute, Switzerland
--  All rights reserved.
--  Authors: Oliver Bruendler
------------------------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.psi_common_math_pkg.all;
use work.psi_common_logic_pkg.all;
use work.psi_tb_compare_pkg.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_common_arb_round_robin_tb is
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_common_arb_round_robin_tb is
  -- *** Fixed Generics ***
  constant size_g : natural := 5;

  -- *** Not Assigned Generics (default values) ***
  constant OutputRegister_g : boolean := true;

  -- *** TB Control ***
  signal TbRunning            : boolean                  := True;
  signal NextCase             : integer                  := -1;
  signal ProcessDone          : std_logic_vector(0 to 0) := (others => '0');
  constant AllProcessesDone_c : std_logic_vector(0 to 0) := (others => '1');
  constant TbProcNr_stimuli_c : integer                  := 0;

  -- *** DUT Signals ***
  signal clk_i       : std_logic                             := '1';
  signal rst_i       : std_logic                             := '1';
  signal grant_rdy_o : std_logic                             := '0';
  signal grant_vld_o : std_logic                             := '0';
  signal request_i   : std_logic_vector(size_g - 1 downto 0) := (others => '0');
  signal grant_o     : std_logic_vector(size_g - 1 downto 0) := (others => '0');

begin
  ------------------------------------------------------------
  -- DUT Instantiation
  ------------------------------------------------------------
  i_dut : entity work.psi_common_arb_round_robin
    generic map(
      width_g => size_g
    )
    port map(
      clk_i       => clk_i,
      rst_i       => rst_i,
      request_i   => request_i,
      grant_o     => grant_o,
      grant_rdy_o => grant_rdy_o,
      grant_vld_o => grant_vld_o
    );

  ------------------------------------------------------------
  -- Testbench Control !DO NOT EDIT!
  ------------------------------------------------------------
  p_tb_control : process
  begin
    wait until rst_i = '0';
    wait until ProcessDone = AllProcessesDone_c;
    TbRunning <= false;
    wait;
  end process;

  ------------------------------------------------------------
  -- Clocks !DO NOT EDIT!
  ------------------------------------------------------------
  p_clock_Clk : process
    constant Frequency_c : real := real(100e6);
  begin
    while TbRunning loop
      wait for 0.5 * (1 sec) / Frequency_c;
      clk_i <= not clk_i;
    end loop;
    wait;
  end process;

  ------------------------------------------------------------
  -- Processes
  ------------------------------------------------------------
  -- *** stimuli ***
  p_stimuli : process
  begin
    rst_i <= '1';
    wait until rising_edge(clk_i);
    wait until rising_edge(clk_i);
    rst_i <= '0';

    -- Always Rdy
    grant_rdy_o <= '1';

    -- Single Bit
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00000", grant_o, "Wrong value after reset");
    StdlCompare(0, grant_vld_o, "Valid high unexpectedly");
    wait until rising_edge(clk_i);
    request_i <= "01000";
    wait for 1 ns;
    StdlvCompareStdlv("01000", grant_o, "grant_o 1 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("01000", grant_o, "grant_o 2 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    request_i <= "00000";
    wait for 1 ns;
    StdlvCompareStdlv("00000", grant_o, "grant_o not de-asserted");
    StdlCompare(0, grant_vld_o, "Valid high unexpectedly");

    -- Multi Bit
    wait until rising_edge(clk_i);
    request_i <= "10000";
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o 3 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    request_i <= "10111";
    wait for 1 ns;
    StdlvCompareStdlv("00100", grant_o, "grant_o 4 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");

    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00010", grant_o, "grant_o 5 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00001", grant_o, "grant_o 6 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o 7 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00100", grant_o, "grant_o 8 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    request_i <= "00001";
    wait for 1 ns;
    StdlvCompareStdlv("00001", grant_o, "grant_o 9 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    request_i <= "11001";
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o 10 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("01000", grant_o, "grant_o 11 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    request_i <= "00000";
    wait until rising_edge(clk_i);
    wait until rising_edge(clk_i);
    wait until rising_edge(clk_i);

    -- Rdy Low
    -- Revert mask to correct state (all unmasked)
    grant_rdy_o <= '1';
    wait until rising_edge(clk_i);
    request_i   <= "00001";
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    -- Start test
    request_i   <= "10011";
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o 12 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    grant_rdy_o <= '1';
    StdlvCompareStdlv("10000", grant_o, "grant_o 12 not kept");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    wait for 1 ns;
    StdlvCompareStdlv("00010", grant_o, "grant_o 13 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '1';
    wait for 1 ns;
    StdlvCompareStdlv("00010", grant_o, "grant_o 13 not kept");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    wait for 1 ns;
    StdlvCompareStdlv("00001", grant_o, "grant_o 14 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '1';
    wait for 1 ns;
    request_i   <= "10001";
    StdlvCompareStdlv("00001", grant_o, "grant_o 14 not kept");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o 15 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '1';
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o 15 not kept");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    wait for 1 ns;
    StdlvCompareStdlv("00001", grant_o, "grant_o 16 Wrong");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '1';
    wait for 1 ns;
    StdlvCompareStdlv("00001", grant_o, "grant_o 16 not kept");
    StdlCompare(1, grant_vld_o, "Valid low unexpectedly");
    grant_rdy_o <= '0';
    request_i   <= "00000";
    wait for 1 us;

    -- Example from documentation
    rst_i       <= '1';
    wait until rising_edge(clk_i);
    rst_i       <= '0';
    wait until rising_edge(clk_i);
    wait until rising_edge(clk_i);
    request_i   <= "10110";
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o Wrong, Doc 0");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o Wrong, Doc 1");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 1");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '1';
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o Wrong, Doc 2");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 2");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00100", grant_o, "grant_o Wrong, Doc 3");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 3");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00010", grant_o, "grant_o Wrong, Doc 4");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 4");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("10000", grant_o, "grant_o Wrong, Doc 5");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 5");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    wait for 1 ns;
    StdlvCompareStdlv("00100", grant_o, "grant_o Wrong, Doc 6");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 6");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("00100", grant_o, "grant_o Wrong, Doc 7");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 7");
    wait until rising_edge(clk_i);
    request_i   <= "01100";
    wait for 1 ns;
    StdlvCompareStdlv("01000", grant_o, "grant_o Wrong, Doc 8");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 8");
    wait until rising_edge(clk_i);
    wait for 1 ns;
    StdlvCompareStdlv("01000", grant_o, "grant_o Wrong, Doc 9");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 9");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '1';
    wait for 1 ns;
    StdlvCompareStdlv("01000", grant_o, "grant_o Wrong, Doc 10");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 10");
    wait until rising_edge(clk_i);
    grant_rdy_o <= '0';
    wait for 1 ns;
    StdlvCompareStdlv("00100", grant_o, "grant_o Wrong, Doc 11");
    StdlCompare(1, grant_vld_o, "Valid Wrong, Doc 11");
    wait until rising_edge(clk_i);
    request_i   <= "00000";
    wait for 1 ns;
    StdlvCompareStdlv("00000", grant_o, "grant_o Wrong, Doc 12");
    StdlCompare(0, grant_vld_o, "Valid Wrong, Doc 12");
    wait for 1 us;

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_stimuli_c) <= '1';
    wait;
  end process;

end;
